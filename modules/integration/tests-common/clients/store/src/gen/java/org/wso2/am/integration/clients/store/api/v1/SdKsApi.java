/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * The version of the OpenAPI document: v1.1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.store.api.v1;

import org.wso2.am.integration.clients.store.api.ApiCallback;
import org.wso2.am.integration.clients.store.api.ApiClient;
import org.wso2.am.integration.clients.store.api.ApiException;
import org.wso2.am.integration.clients.store.api.ApiResponse;
import org.wso2.am.integration.clients.store.api.Configuration;
import org.wso2.am.integration.clients.store.api.Pair;
import org.wso2.am.integration.clients.store.api.ProgressRequestBody;
import org.wso2.am.integration.clients.store.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.store.api.v1.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SdKsApi {
    private ApiClient localVarApiClient;

    public SdKsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SdKsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for apisApiIdSdksLanguageGet
     * @param apiId ID of the specific API for which the SDK is required.  (required)
     * @param language Programming language of the SDK that is required.  (required)
     * @param xWSO2Tenant For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be   retirieved from.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. SDK generated successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Requested SDK Language is not supported.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. Requested API does not exist.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while generating SDK.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apisApiIdSdksLanguageGetCall(String apiId, String language, String xWSO2Tenant, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apis/{apiId}/sdks/{language}"
            .replaceAll("\\{" + "apiId" + "\\}", localVarApiClient.escapeString(apiId.toString()))
            .replaceAll("\\{" + "language" + "\\}", localVarApiClient.escapeString(language.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xWSO2Tenant != null) {
            localVarHeaderParams.put("X-WSO2-Tenant", localVarApiClient.parameterToString(xWSO2Tenant));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/zip"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apisApiIdSdksLanguageGetValidateBeforeCall(String apiId, String language, String xWSO2Tenant, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiId' is set
        if (apiId == null) {
            throw new ApiException("Missing the required parameter 'apiId' when calling apisApiIdSdksLanguageGet(Async)");
        }
        
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling apisApiIdSdksLanguageGet(Async)");
        }
        

        okhttp3.Call localVarCall = apisApiIdSdksLanguageGetCall(apiId, language, xWSO2Tenant, _callback);
        return localVarCall;

    }

    /**
     * Generate a SDK for an API 
     * This operation can be used to generate SDKs (System Development Kits), for the APIs available in the API Store, for a requested development language. 
     * @param apiId ID of the specific API for which the SDK is required.  (required)
     * @param language Programming language of the SDK that is required.  (required)
     * @param xWSO2Tenant For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be   retirieved from.  (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. SDK generated successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Requested SDK Language is not supported.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. Requested API does not exist.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while generating SDK.  </td><td>  -  </td></tr>
     </table>
     */
    public byte[] apisApiIdSdksLanguageGet(String apiId, String language, String xWSO2Tenant) throws ApiException {
        ApiResponse<byte[]> localVarResp = apisApiIdSdksLanguageGetWithHttpInfo(apiId, language, xWSO2Tenant);
        return localVarResp.getData();
    }

    /**
     * Generate a SDK for an API 
     * This operation can be used to generate SDKs (System Development Kits), for the APIs available in the API Store, for a requested development language. 
     * @param apiId ID of the specific API for which the SDK is required.  (required)
     * @param language Programming language of the SDK that is required.  (required)
     * @param xWSO2Tenant For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be   retirieved from.  (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. SDK generated successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Requested SDK Language is not supported.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. Requested API does not exist.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while generating SDK.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> apisApiIdSdksLanguageGetWithHttpInfo(String apiId, String language, String xWSO2Tenant) throws ApiException {
        okhttp3.Call localVarCall = apisApiIdSdksLanguageGetValidateBeforeCall(apiId, language, xWSO2Tenant, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a SDK for an API  (asynchronously)
     * This operation can be used to generate SDKs (System Development Kits), for the APIs available in the API Store, for a requested development language. 
     * @param apiId ID of the specific API for which the SDK is required.  (required)
     * @param language Programming language of the SDK that is required.  (required)
     * @param xWSO2Tenant For cross-tenant invocations, this is used to specify the tenant domain, where the resource need to be   retirieved from.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. SDK generated successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Requested SDK Language is not supported.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found. Requested API does not exist.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while generating SDK.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apisApiIdSdksLanguageGetAsync(String apiId, String language, String xWSO2Tenant, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = apisApiIdSdksLanguageGetValidateBeforeCall(apiId, language, xWSO2Tenant, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sdkGenLanguagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of supported languages for generating SDKs.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The list of languages is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while retrieving the list.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sdkGenLanguagesGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sdk-gen/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sdkGenLanguagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = sdkGenLanguagesGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get a list of supported SDK languages 
     * This operation will provide a list of programming languages that are supported by the swagger codegen library for generating System Development Kits (SDKs) for APIs available in the API Manager Store 
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of supported languages for generating SDKs.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The list of languages is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while retrieving the list.  </td><td>  -  </td></tr>
     </table>
     */
    public void sdkGenLanguagesGet() throws ApiException {
        sdkGenLanguagesGetWithHttpInfo();
    }

    /**
     * Get a list of supported SDK languages 
     * This operation will provide a list of programming languages that are supported by the swagger codegen library for generating System Development Kits (SDKs) for APIs available in the API Manager Store 
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of supported languages for generating SDKs.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The list of languages is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while retrieving the list.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sdkGenLanguagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = sdkGenLanguagesGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get a list of supported SDK languages  (asynchronously)
     * This operation will provide a list of programming languages that are supported by the swagger codegen library for generating System Development Kits (SDKs) for APIs available in the API Manager Store 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. List of supported languages for generating SDKs.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The list of languages is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error. Error while retrieving the list.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sdkGenLanguagesGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sdkGenLanguagesGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
