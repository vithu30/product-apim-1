/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * The version of the OpenAPI document: v1.1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.store.api.v1;

import org.wso2.am.integration.clients.store.api.ApiCallback;
import org.wso2.am.integration.clients.store.api.ApiClient;
import org.wso2.am.integration.clients.store.api.ApiException;
import org.wso2.am.integration.clients.store.api.ApiResponse;
import org.wso2.am.integration.clients.store.api.Configuration;
import org.wso2.am.integration.clients.store.api.Pair;
import org.wso2.am.integration.clients.store.api.ProgressRequestBody;
import org.wso2.am.integration.clients.store.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationListDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.ErrorDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.WorkflowResponseDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationsApi {
    private ApiClient localVarApiClient;

    public ApplicationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for applicationsApplicationIdDelete
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the existing Application.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. Resource to be deleted does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdDeleteCall(String applicationId, String ifMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsApplicationIdDeleteValidateBeforeCall(String applicationId, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationsApplicationIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsApplicationIdDeleteCall(applicationId, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Remove an application 
     * This operation can be used to remove an application specifying its id. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the existing Application.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. Resource to be deleted does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public void applicationsApplicationIdDelete(String applicationId, String ifMatch) throws ApiException {
        applicationsApplicationIdDeleteWithHttpInfo(applicationId, ifMatch);
    }

    /**
     * Remove an application 
     * This operation can be used to remove an application specifying its id. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the existing Application.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. Resource to be deleted does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> applicationsApplicationIdDeleteWithHttpInfo(String applicationId, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsApplicationIdDeleteValidateBeforeCall(applicationId, ifMatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove an application  (asynchronously)
     * This operation can be used to remove an application specifying its id. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Resource successfully deleted.  </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the existing Application.  <br>  </td></tr>
        <tr><td> 404 </td><td> Not Found. Resource to be deleted does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdDeleteAsync(String applicationId, String ifMatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsApplicationIdDeleteValidateBeforeCall(applicationId, ifMatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsApplicationIdGet
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Requested application does not exist.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdGetCall(String applicationId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsApplicationIdGetValidateBeforeCall(String applicationId, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationsApplicationIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsApplicationIdGetCall(applicationId, ifNoneMatch, _callback);
        return localVarCall;

    }

    /**
     * Get details of an application 
     * This operation can be used to retrieve details of an individual application specifying the application id in the URI. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @return ApplicationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Requested application does not exist.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDTO applicationsApplicationIdGet(String applicationId, String ifNoneMatch) throws ApiException {
        ApiResponse<ApplicationDTO> localVarResp = applicationsApplicationIdGetWithHttpInfo(applicationId, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Get details of an application 
     * This operation can be used to retrieve details of an individual application specifying the application id in the URI. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @return ApiResponse&lt;ApplicationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Requested application does not exist.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDTO> applicationsApplicationIdGetWithHttpInfo(String applicationId, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsApplicationIdGetValidateBeforeCall(applicationId, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details of an application  (asynchronously)
     * This operation can be used to retrieve details of an individual application specifying the application id in the URI. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. Requested application does not exist.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdGetAsync(String applicationId, String ifNoneMatch, final ApiCallback<ApplicationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsApplicationIdGetValidateBeforeCall(applicationId, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsApplicationIdPut
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param body Application object that needs to be updated  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application updated.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  * Location - The URL of the newly created resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdPutCall(String applicationId, ApplicationDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationId}"
            .replaceAll("\\{" + "applicationId" + "\\}", localVarApiClient.escapeString(applicationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsApplicationIdPutValidateBeforeCall(String applicationId, ApplicationDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationsApplicationIdPut(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applicationsApplicationIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsApplicationIdPutCall(applicationId, body, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Update an application 
     * This operation can be used to update an application. Upon succesfull you will retrieve the updated application as the response. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param body Application object that needs to be updated  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApplicationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application updated.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  * Location - The URL of the newly created resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDTO applicationsApplicationIdPut(String applicationId, ApplicationDTO body, String ifMatch) throws ApiException {
        ApiResponse<ApplicationDTO> localVarResp = applicationsApplicationIdPutWithHttpInfo(applicationId, body, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Update an application 
     * This operation can be used to update an application. Upon succesfull you will retrieve the updated application as the response. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param body Application object that needs to be updated  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApiResponse&lt;ApplicationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application updated.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  * Location - The URL of the newly created resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDTO> applicationsApplicationIdPutWithHttpInfo(String applicationId, ApplicationDTO body, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsApplicationIdPutValidateBeforeCall(applicationId, body, ifMatch, null);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an application  (asynchronously)
     * This operation can be used to update an application. Upon succesfull you will retrieve the updated application as the response. 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param body Application object that needs to be updated  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application updated.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request.  <br>  * Last-Modified - Date and time the resource has been modifed the last time. Used by caches, or in conditional requests.  <br>  * Location - The URL of the newly created resource.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdPutAsync(String applicationId, ApplicationDTO body, String ifMatch, final ApiCallback<ApplicationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsApplicationIdPutValidateBeforeCall(applicationId, body, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsGet
     * @param groupId Application Group Id  (optional)
     * @param query **Search condition**.  You can search for an application by specifying the name as \&quot;query\&quot; attribute.  Eg. \&quot;app1\&quot; will match an application if the name is exactly \&quot;app1\&quot;.  Currently this does not support wildcards. Given name must exactly match the application name.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application list returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsGetCall(String groupId, String query, String sortBy, String sortOrder, Integer limit, Integer offset, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (groupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupId", groupId));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifNoneMatch != null) {
            localVarHeaderParams.put("If-None-Match", localVarApiClient.parameterToString(ifNoneMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsGetValidateBeforeCall(String groupId, String query, String sortBy, String sortOrder, Integer limit, Integer offset, String ifNoneMatch, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = applicationsGetCall(groupId, query, sortBy, sortOrder, limit, offset, ifNoneMatch, _callback);
        return localVarCall;

    }

    /**
     * Retrieve/Search applications 
     * This operation can be used to retrieve list of applications that is belonged to the user associated with the provided access token. 
     * @param groupId Application Group Id  (optional)
     * @param query **Search condition**.  You can search for an application by specifying the name as \&quot;query\&quot; attribute.  Eg. \&quot;app1\&quot; will match an application if the name is exactly \&quot;app1\&quot;.  Currently this does not support wildcards. Given name must exactly match the application name.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @return ApplicationListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application list returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationListDTO applicationsGet(String groupId, String query, String sortBy, String sortOrder, Integer limit, Integer offset, String ifNoneMatch) throws ApiException {
        ApiResponse<ApplicationListDTO> localVarResp = applicationsGetWithHttpInfo(groupId, query, sortBy, sortOrder, limit, offset, ifNoneMatch);
        return localVarResp.getData();
    }

    /**
     * Retrieve/Search applications 
     * This operation can be used to retrieve list of applications that is belonged to the user associated with the provided access token. 
     * @param groupId Application Group Id  (optional)
     * @param query **Search condition**.  You can search for an application by specifying the name as \&quot;query\&quot; attribute.  Eg. \&quot;app1\&quot; will match an application if the name is exactly \&quot;app1\&quot;.  Currently this does not support wildcards. Given name must exactly match the application name.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @return ApiResponse&lt;ApplicationListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application list returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationListDTO> applicationsGetWithHttpInfo(String groupId, String query, String sortBy, String sortOrder, Integer limit, Integer offset, String ifNoneMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsGetValidateBeforeCall(groupId, query, sortBy, sortOrder, limit, offset, ifNoneMatch, null);
        Type localVarReturnType = new TypeToken<ApplicationListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve/Search applications  (asynchronously)
     * This operation can be used to retrieve list of applications that is belonged to the user associated with the provided access token. 
     * @param groupId Application Group Id  (optional)
     * @param query **Search condition**.  You can search for an application by specifying the name as \&quot;query\&quot; attribute.  Eg. \&quot;app1\&quot; will match an application if the name is exactly \&quot;app1\&quot;.  Currently this does not support wildcards. Given name must exactly match the application name.  (optional)
     * @param sortBy  (optional)
     * @param sortOrder  (optional)
     * @param limit Maximum size of resource array to return.  (optional, default to 25)
     * @param offset Starting point within the complete list of items qualified.  (optional, default to 0)
     * @param ifNoneMatch Validator for conditional requests; based on the ETag of the formerly retrieved variant of the resourec.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Application list returned.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional requests.  <br>  </td></tr>
        <tr><td> 304 </td><td> Not Modified. Empty body because the client has already the latest version of the requested resource.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable. The requested media type is not supported.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsGetAsync(String groupId, String query, String sortBy, String sortOrder, Integer limit, Integer offset, String ifNoneMatch, final ApiCallback<ApplicationListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsGetValidateBeforeCall(groupId, query, sortBy, sortOrder, limit, offset, ifNoneMatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsPost
     * @param body Application object that is to be created.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request  <br>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Application already exists.  </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. The entity of the request was in a not supported format.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsPostCall(ApplicationDTO body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsPostValidateBeforeCall(ApplicationDTO body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applicationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsPostCall(body, _callback);
        return localVarCall;

    }

    /**
     * Create a new application 
     * This operation can be used to create a new application specifying the details of the application in the payload. 
     * @param body Application object that is to be created.  (required)
     * @return ApplicationDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request  <br>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Application already exists.  </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. The entity of the request was in a not supported format.  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationDTO applicationsPost(ApplicationDTO body) throws ApiException {
        ApiResponse<ApplicationDTO> localVarResp = applicationsPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Create a new application 
     * This operation can be used to create a new application specifying the details of the application in the payload. 
     * @param body Application object that is to be created.  (required)
     * @return ApiResponse&lt;ApplicationDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request  <br>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Application already exists.  </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. The entity of the request was in a not supported format.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationDTO> applicationsPostWithHttpInfo(ApplicationDTO body) throws ApiException {
        okhttp3.Call localVarCall = applicationsPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new application  (asynchronously)
     * This operation can be used to create a new application specifying the details of the application in the payload. 
     * @param body Application object that is to be created.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with the newly created object as entity in the body. Location header contains URL of newly created entity.  </td><td>  * ETag - Entity Tag of the response resource. Used by caches, or in conditional request  <br>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 202 </td><td> Accepted. The request has been accepted.  </td><td>  * Location - Location of the newly created Application.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict. Application already exists.  </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported media type. The entity of the request was in a not supported format.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsPostAsync(ApplicationDTO body, final ApiCallback<ApplicationDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ApplicationDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
