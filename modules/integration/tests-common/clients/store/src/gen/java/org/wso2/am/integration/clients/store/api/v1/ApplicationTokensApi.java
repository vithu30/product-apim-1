/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * The version of the OpenAPI document: v1.1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.store.api.v1;

import org.wso2.am.integration.clients.store.api.ApiCallback;
import org.wso2.am.integration.clients.store.api.ApiClient;
import org.wso2.am.integration.clients.store.api.ApiException;
import org.wso2.am.integration.clients.store.api.ApiResponse;
import org.wso2.am.integration.clients.store.api.Configuration;
import org.wso2.am.integration.clients.store.api.Pair;
import org.wso2.am.integration.clients.store.api.ProgressRequestBody;
import org.wso2.am.integration.clients.store.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationTokenDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.ApplicationTokenGenerateRequestDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApplicationTokensApi {
    private ApiClient localVarApiClient;

    public ApplicationTokensApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApplicationTokensApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for applicationsApplicationIdKeysKeyTypeGenerateTokenPost
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyType **Application Key Type** standing for the type of the keys (i.e. Production or Sandbox).  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdKeysKeyTypeGenerateTokenPostCall(String applicationId, String keyType, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationId}/keys/{keyType}/generate-token"
            .replaceAll("\\{" + "applicationId" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "keyType" + "\\}", localVarApiClient.escapeString(keyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsApplicationIdKeysKeyTypeGenerateTokenPostValidateBeforeCall(String applicationId, String keyType, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationsApplicationIdKeysKeyTypeGenerateTokenPost(Async)");
        }
        
        // verify the required parameter 'keyType' is set
        if (keyType == null) {
            throw new ApiException("Missing the required parameter 'keyType' when calling applicationsApplicationIdKeysKeyTypeGenerateTokenPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applicationsApplicationIdKeysKeyTypeGenerateTokenPost(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsApplicationIdKeysKeyTypeGenerateTokenPostCall(applicationId, keyType, body, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Generate application token
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyType **Application Key Type** standing for the type of the keys (i.e. Production or Sandbox).  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApplicationTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTokenDTO applicationsApplicationIdKeysKeyTypeGenerateTokenPost(String applicationId, String keyType, ApplicationTokenGenerateRequestDTO body, String ifMatch) throws ApiException {
        ApiResponse<ApplicationTokenDTO> localVarResp = applicationsApplicationIdKeysKeyTypeGenerateTokenPostWithHttpInfo(applicationId, keyType, body, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Generate application token
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyType **Application Key Type** standing for the type of the keys (i.e. Production or Sandbox).  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApiResponse&lt;ApplicationTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTokenDTO> applicationsApplicationIdKeysKeyTypeGenerateTokenPostWithHttpInfo(String applicationId, String keyType, ApplicationTokenGenerateRequestDTO body, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsApplicationIdKeysKeyTypeGenerateTokenPostValidateBeforeCall(applicationId, keyType, body, ifMatch, null);
        Type localVarReturnType = new TypeToken<ApplicationTokenDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate application token (asynchronously)
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyType **Application Key Type** standing for the type of the keys (i.e. Production or Sandbox).  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdKeysKeyTypeGenerateTokenPostAsync(String applicationId, String keyType, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback<ApplicationTokenDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsApplicationIdKeysKeyTypeGenerateTokenPostValidateBeforeCall(applicationId, keyType, body, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTokenDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPost
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyMappingId OAuth Key Identifier consisting of the UUID of the Oauth Key Mapping.  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostCall(String applicationId, String keyMappingId, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/applications/{applicationId}/oauth-keys/{keyMappingId}/generate-token"
            .replaceAll("\\{" + "applicationId" + "\\}", localVarApiClient.escapeString(applicationId.toString()))
            .replaceAll("\\{" + "keyMappingId" + "\\}", localVarApiClient.escapeString(keyMappingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostValidateBeforeCall(String applicationId, String keyMappingId, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'applicationId' is set
        if (applicationId == null) {
            throw new ApiException("Missing the required parameter 'applicationId' when calling applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPost(Async)");
        }
        
        // verify the required parameter 'keyMappingId' is set
        if (keyMappingId == null) {
            throw new ApiException("Missing the required parameter 'keyMappingId' when calling applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPost(Async)");
        }
        

        okhttp3.Call localVarCall = applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostCall(applicationId, keyMappingId, body, ifMatch, _callback);
        return localVarCall;

    }

    /**
     * Generate application token
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyMappingId OAuth Key Identifier consisting of the UUID of the Oauth Key Mapping.  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApplicationTokenDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationTokenDTO applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPost(String applicationId, String keyMappingId, ApplicationTokenGenerateRequestDTO body, String ifMatch) throws ApiException {
        ApiResponse<ApplicationTokenDTO> localVarResp = applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostWithHttpInfo(applicationId, keyMappingId, body, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Generate application token
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyMappingId OAuth Key Identifier consisting of the UUID of the Oauth Key Mapping.  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @return ApiResponse&lt;ApplicationTokenDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationTokenDTO> applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostWithHttpInfo(String applicationId, String keyMappingId, ApplicationTokenGenerateRequestDTO body, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostValidateBeforeCall(applicationId, keyMappingId, body, ifMatch, null);
        Type localVarReturnType = new TypeToken<ApplicationTokenDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate application token (asynchronously)
     * Generate an access token for application by client_credentials grant type 
     * @param applicationId Application Identifier consisting of the UUID of the Application.  (required)
     * @param keyMappingId OAuth Key Identifier consisting of the UUID of the Oauth Key Mapping.  (required)
     * @param body Application token generation request object  (required)
     * @param ifMatch Validator for conditional requests; based on ETag.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Token is generated.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Invalid request or validation error  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The resource to be updated does not exist.  </td><td>  -  </td></tr>
        <tr><td> 412 </td><td> Precondition Failed. The request has not been performed because one of the preconditions is not met.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostAsync(String applicationId, String keyMappingId, ApplicationTokenGenerateRequestDTO body, String ifMatch, final ApiCallback<ApplicationTokenDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = applicationsApplicationIdOauthKeysKeyMappingIdGenerateTokenPostValidateBeforeCall(applicationId, keyMappingId, body, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<ApplicationTokenDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
