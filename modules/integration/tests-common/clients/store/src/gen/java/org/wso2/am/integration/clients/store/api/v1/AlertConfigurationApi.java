/*
 * WSO2 API Manager - Store
 * This document specifies a **RESTful API** for WSO2 **API Manager** - Store.  It is written with [swagger 2](http://swagger.io/). 
 *
 * The version of the OpenAPI document: v1.1
 * Contact: architecture@wso2.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.wso2.am.integration.clients.store.api.v1;

import org.wso2.am.integration.clients.store.api.ApiCallback;
import org.wso2.am.integration.clients.store.api.ApiClient;
import org.wso2.am.integration.clients.store.api.ApiException;
import org.wso2.am.integration.clients.store.api.ApiResponse;
import org.wso2.am.integration.clients.store.api.Configuration;
import org.wso2.am.integration.clients.store.api.Pair;
import org.wso2.am.integration.clients.store.api.ProgressRequestBody;
import org.wso2.am.integration.clients.store.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.wso2.am.integration.clients.store.api.v1.dto.AlertConfigDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.AlertConfigListDTO;
import org.wso2.am.integration.clients.store.api.v1.dto.ErrorDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AlertConfigurationApi {
    private ApiClient localVarApiClient;

    public AlertConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AlertConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addAlertConfig
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param body Configuration for AbnormalRequestCount alert type (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with newly created object as entity. Location header contains URL of newly created entity.  </td><td>  * Location - The location of the newly created entity.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAlertConfigCall(String alertType, String configurationId, Map<String, String> body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/alerts/{alertType}/configurations/{configurationId}"
            .replaceAll("\\{" + "alertType" + "\\}", localVarApiClient.escapeString(alertType.toString()))
            .replaceAll("\\{" + "configurationId" + "\\}", localVarApiClient.escapeString(configurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addAlertConfigValidateBeforeCall(String alertType, String configurationId, Map<String, String> body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'alertType' is set
        if (alertType == null) {
            throw new ApiException("Missing the required parameter 'alertType' when calling addAlertConfig(Async)");
        }
        
        // verify the required parameter 'configurationId' is set
        if (configurationId == null) {
            throw new ApiException("Missing the required parameter 'configurationId' when calling addAlertConfig(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addAlertConfig(Async)");
        }
        

        okhttp3.Call localVarCall = addAlertConfigCall(alertType, configurationId, body, _callback);
        return localVarCall;

    }

    /**
     * Add AbnormalRequestsPerMin alert configurations. 
     * This operation is used to add configuration for the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param body Configuration for AbnormalRequestCount alert type (required)
     * @return AlertConfigDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with newly created object as entity. Location header contains URL of newly created entity.  </td><td>  * Location - The location of the newly created entity.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public AlertConfigDTO addAlertConfig(String alertType, String configurationId, Map<String, String> body) throws ApiException {
        ApiResponse<AlertConfigDTO> localVarResp = addAlertConfigWithHttpInfo(alertType, configurationId, body);
        return localVarResp.getData();
    }

    /**
     * Add AbnormalRequestsPerMin alert configurations. 
     * This operation is used to add configuration for the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param body Configuration for AbnormalRequestCount alert type (required)
     * @return ApiResponse&lt;AlertConfigDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with newly created object as entity. Location header contains URL of newly created entity.  </td><td>  * Location - The location of the newly created entity.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertConfigDTO> addAlertConfigWithHttpInfo(String alertType, String configurationId, Map<String, String> body) throws ApiException {
        okhttp3.Call localVarCall = addAlertConfigValidateBeforeCall(alertType, configurationId, body, null);
        Type localVarReturnType = new TypeToken<AlertConfigDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add AbnormalRequestsPerMin alert configurations.  (asynchronously)
     * This operation is used to add configuration for the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param body Configuration for AbnormalRequestCount alert type (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created. Successful response with newly created object as entity. Location header contains URL of newly created entity.  </td><td>  * Location - The location of the newly created entity.  <br>  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addAlertConfigAsync(String alertType, String configurationId, Map<String, String> body, final ApiCallback<AlertConfigDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = addAlertConfigValidateBeforeCall(alertType, configurationId, body, _callback);
        Type localVarReturnType = new TypeToken<AlertConfigDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAlertConfig
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The alert config is deleted successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The provided alert configuration is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlertConfigCall(String alertType, String configurationId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertType}/configurations/{configurationId}"
            .replaceAll("\\{" + "alertType" + "\\}", localVarApiClient.escapeString(alertType.toString()))
            .replaceAll("\\{" + "configurationId" + "\\}", localVarApiClient.escapeString(configurationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAlertConfigValidateBeforeCall(String alertType, String configurationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'alertType' is set
        if (alertType == null) {
            throw new ApiException("Missing the required parameter 'alertType' when calling deleteAlertConfig(Async)");
        }
        
        // verify the required parameter 'configurationId' is set
        if (configurationId == null) {
            throw new ApiException("Missing the required parameter 'configurationId' when calling deleteAlertConfig(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAlertConfigCall(alertType, configurationId, _callback);
        return localVarCall;

    }

    /**
     * Delete the selected configuration from AbnormalRequestsPerMin alert type. 
     * This operation is used to delete configuration from the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The alert config is deleted successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The provided alert configuration is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAlertConfig(String alertType, String configurationId) throws ApiException {
        deleteAlertConfigWithHttpInfo(alertType, configurationId);
    }

    /**
     * Delete the selected configuration from AbnormalRequestsPerMin alert type. 
     * This operation is used to delete configuration from the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The alert config is deleted successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The provided alert configuration is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAlertConfigWithHttpInfo(String alertType, String configurationId) throws ApiException {
        okhttp3.Call localVarCall = deleteAlertConfigValidateBeforeCall(alertType, configurationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete the selected configuration from AbnormalRequestsPerMin alert type.  (asynchronously)
     * This operation is used to delete configuration from the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param configurationId The alert configuration id.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The alert config is deleted successfully.  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request The request parameters validation failed.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found. The provided alert configuration is not found.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAlertConfigAsync(String alertType, String configurationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAlertConfigValidateBeforeCall(alertType, configurationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAlertConfigs
     * @param alertType The alert type.  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The store alert configuration.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAlertConfigsCall(String alertType, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/alerts/{alertType}/configurations"
            .replaceAll("\\{" + "alertType" + "\\}", localVarApiClient.escapeString(alertType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2Security" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAlertConfigsValidateBeforeCall(String alertType, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'alertType' is set
        if (alertType == null) {
            throw new ApiException("Missing the required parameter 'alertType' when calling getAllAlertConfigs(Async)");
        }
        

        okhttp3.Call localVarCall = getAllAlertConfigsCall(alertType, _callback);
        return localVarCall;

    }

    /**
     * Get all AbnormalRequestsPerMin alert configurations 
     * This operation is used to get all configurations of the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @return AlertConfigListDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The store alert configuration.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public AlertConfigListDTO getAllAlertConfigs(String alertType) throws ApiException {
        ApiResponse<AlertConfigListDTO> localVarResp = getAllAlertConfigsWithHttpInfo(alertType);
        return localVarResp.getData();
    }

    /**
     * Get all AbnormalRequestsPerMin alert configurations 
     * This operation is used to get all configurations of the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @return ApiResponse&lt;AlertConfigListDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The store alert configuration.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertConfigListDTO> getAllAlertConfigsWithHttpInfo(String alertType) throws ApiException {
        okhttp3.Call localVarCall = getAllAlertConfigsValidateBeforeCall(alertType, null);
        Type localVarReturnType = new TypeToken<AlertConfigListDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all AbnormalRequestsPerMin alert configurations  (asynchronously)
     * This operation is used to get all configurations of the AbnormalRequestsPerMin alert type. 
     * @param alertType The alert type.  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The store alert configuration.  </td><td>  * Content-Type - The content type of the body.  <br>  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error An error occurred while retrieving subscribed alert types by user.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAlertConfigsAsync(String alertType, final ApiCallback<AlertConfigListDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAlertConfigsValidateBeforeCall(alertType, _callback);
        Type localVarReturnType = new TypeToken<AlertConfigListDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
